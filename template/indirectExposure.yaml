AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for a publicly exposed EC2 instance with IMDv1, a vulnerable web application, and an S3 bucket with full access. Use for educational purposes only.'

Parameters:
  LatestAmiId:
    Description: "This parameter obtains the latest AMI for Amazon Linux 2"
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group with open inbound access for the vulnerable web app
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "customer-data-bucket-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"

  S3BucketFullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref EC2InstanceRole
      PolicyName: S3BucketFullAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'


  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile


      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install python3 python3-pip -y
          pip3 install flask requests
          cat > /home/ec2-user/app.py << EOF
          from flask import Flask, request, Response
          import requests

          app = Flask(__name__)

          @app.route('/fetch', methods=['GET'])
          def fetch_url():
              url = request.args.get('url', '')
              if url:
                  try:
                      response = requests.get(url, timeout=5)
                      return response.text
                  except Exception as e:
                      return str(e), 500
              return 'Welcome to RSAC Learning Lab, Usage -> /fetch?url=http://example.com', 400

          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=80)
          EOF
          chown ec2-user:ec2-user /home/ec2-user/app.py
          nohup python3 /home/ec2-user/app.py > /dev/null 2>&1 &

Outputs:
  InstancePublicIp:
    Description: The public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  BucketName:
    Description: The name of the created S3 bucket.
    Value: !Ref S3Bucket
